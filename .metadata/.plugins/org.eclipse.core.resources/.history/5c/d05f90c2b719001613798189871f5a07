package com.whp;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.util.Iterator;

public class SelectorClientTest {
	//在客户端定义选择器
	private Selector selector;
	
	//定义缓冲区
	private ByteBuffer outBuff = ByteBuffer.allocate(1024);
	private ByteBuffer inBuff = ByteBuffer.allocate(1024);
	private int keys=0;
	private SocketChannel channel = null;
	
	/**
	 * 初始化通道信息
	 * @throws IOException
	 */
	public void initClient() throws IOException{
		//获得一个socket通道，并没有进行连接
		channel = SocketChannel.open();
		//获得一个通道管理器
		selector = Selector.open();
		//设置为非阻塞
		channel.configureBlocking(false);
		
		//连接服务器
		channel.connect(new InetSocketAddress("127.0.0.1",8888));
		//注册客户端连接服务器的事件
		channel.register(this.selector, SelectionKey.OP_ACCEPT);
		
	}
	
	/**
	 * 监听在通道上面进行注册的事件
	 * @throws IOException 
	 */
	public void listen() throws IOException{
		while(true){
			keys = this.selector.select();
			if(keys>0){
				Iterator it = this.selector.selectedKeys().iterator();
				while(it.hasNext()){
					SelectionKey key = (SelectionKey) it.next();
					if(channel.isConnectionPending()){
						channel.finishConnect();
					}
				}
			}
		}
		
	}
	
	/**
	 * 启动程序
	 */
	public void start(){
		try {
			initClient();
			listen();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	/**
	 * @param args
	 */
	public static void main(String[] args) {

	}

}
